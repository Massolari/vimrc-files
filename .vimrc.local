"*****************************
" Configurações de variáveis *
"*****************************
" Configuração de leader
let mapleader="\<Space>"

" Configuração de local leader
let maplocalleader="\\"

" Sneak como easymotion
let g:sneak#label = 1

" Iniciar language servers
let g:LanguageClient_autoStart = 1

let g:LanguageClient_serverCommands = {
    \ 'javascript.jsx': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'typescript': ['/usr/local/bin/typescript-language-server', '--stdio'],
    \ 'php': ['~/.vim/plugged/LanguageServer-php-neovim/vendor/bin/php-language-server.php'],
    \ }

" Usar deoplete desde a inicialização
let g:deoplete#enable_at_startup = 1

" Ao abrir o tagbar atribuir o foco à ele
let g:tagbar_autofocus = 1

" Suporte ao mouse
set mouse=a

" Mostra os números da linha de forma relativa e o número atual da linha
set number relativenumber

" Exibir barra de status
set laststatus=2

" Barra de status com mais informações
set statusline=%#CursorColumn#%{StatuslineGit()}%#StatusLine#\ %{ChangeStatuslineColor()}%f%m%r%h%w%=%y\ (line\ %l\/%L,\ col\ %c)\ 

" Mostrar comandos no canto inferior direito
set showcmd

" Tema do vscode
colorscheme codedark

" Sobrescrevendo cor do quick-scope porque ela some no tema do vscode
highlight QuickScopePrimary guifg='#7a7608'
highlight QuickScopeSecondary guifg='#e27bed'

" Ligar o menu de opções com tab
set wildmenu

" Realçar linha onde o cursor está
set cursorline

" De para com o modo e o sua descrição
let g:currentmode={
	\ 'n'  : 'Normal',
	\ 'no' : 'N·Operator Pending',
	\ 'v'  : 'Visual',
	\ 'V'  : 'V·Line',
	\ '' : 'V·Block',
	\ 's'  : 'Select',
	\ 'S'  : 'S·Line',
	\ '' : 'S·Block',
	\ 'i'  : 'Insert',
	\ 'R'  : 'Replace',
	\ 'Rv' : 'V·Replace',
	\ 'c'  : 'Command',
	\ 'cv' : 'Vim Ex',
	\ 'ce' : 'Ex',
	\ 'r'  : 'Prompt',
	\ 'rm' : 'More',
	\ 'r?' : 'Confirm',
	\ '!'  : 'Shell',
	\}

" Melhora as cores, se tiver suporte
if (has("termguicolors"))
    set termguicolors
endif

" Validar xml com o nsjusecase.xsd
let g:ale_xml_xmllint_options = "--noout --schema vendor/nasajon/mdatransformer/schemas/nsjusecase.xsd %"

" Ao executar o AsyncRun já abrir o quickfix
let g:asyncrun_open = 10

" Usar o emmet apenas no modo visual ou no modo inserção
let g:user_emmet_mode='iv'

" Diretórios à ignorar ao procurar arquivos
let Grep_Skip_Dirs = '.git node_modules cache'

" Comando do fzf
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'app/cache/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" Se o rg está instalado usar outro comando para o FZF
if executable('rg')
    let ignored_files = '--glob "!.git/*" --glob "!node_modules/*" --glob "!app/cache/*" --glob "!app/logs/*" --glob "!web/uploads/*" --glob "!web/bundles/*" --glob "!tags" --glob "!web/css/*" --glob "!web/js/*"'
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --no-ignore --follow '.ignored_files
    set grepprg=rg\ --vimgrep
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --no-ignore --follow '.ignored_files.' --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

"***********
" Comandos *
"***********

" Fechar todos os outros buffers
command! Bdall %bd|e#|bd#

"***********************
" Comandos automáticos *
"***********************

" Configuração de comentário para twig
autocmd FileType html.twig setlocal commentstring={#\ %s\ #}

" Insere o 'use' de classes em arquivos php
" autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

" Sempre que entrar na janela de quickfix retirar o mapeamento customizado do Enter
augroup enable-cr-quickfix
    " In the quickfix window, <CR> is used to jump to the error under the cursor, so undefine the mapping there.
    autocmd!
    autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
augroup END

" Abrir todos os foldings quando entrar em um arquivo
augroup openfold
    autocmd!
    autocmd BufEnter,FocusGained * norm zR
augroup END

" Ativa o número da linha relativo apenas quando o buffer estiver em foco e no normal mode
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"**********
" Funções *
"**********

" Função para alterar o quickfix
function! QFixToggle()
    if exists("g:qfix_win")
        cclose
        unlet g:qfix_win
    else
        copen 10
        let g:qfix_win = bufnr("$")
    endif
endfunction

" Função que é usada para import de arquivos;
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

" Função para pegar a branch atual
function! GitBranch()
    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

" Função para retornar a branch, se for vazio retorna um espaço
function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0 ? l:branchname : ''
endfunction

" Função que muda a cor da status bar dependendo do modo
function! ChangeStatuslineColor() "{{{
    if (mode() ==# 'v')
        hi statusline guibg=#099942 ctermfg=6 guifg=Black ctermbg=0
    elseif (mode() ==# 'V' && g:currentmode[mode()] ==# 'V·Line')
        hi statusline guibg=#7c9909 ctermfg=6 guifg=Black ctermbg=0
    elseif (mode() !=# 't' && g:currentmode[mode()] ==# 'V·Block')
        hi statusline guibg=#f76200 ctermfg=6 guifg=Black ctermbg=0
    elseif (mode() ==# 'i')
        hi statusline guibg=#047199 ctermfg=6 guifg=#D4D4D4 ctermbg=0
    elseif (mode() ==# 'R')
        hi statusline guibg=#99091e ctermfg=6 guifg=#D4D4D4 ctermbg=0
    else
        hi statusline guibg=#373737 ctermfg=6 guifg=#D4D4D4 ctermbg=0
    endif
	return ''
endfunction

"*************
" Mapeamento *
"*************
" Ir para modo normal no terminal de forma rapida
:tnoremap jk <C-\><C-n>
:tnoremap kj <C-\><C-n>

" Mapeamentos do coc
" Abrir outline (ir para função/método) do coc
nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
" Renomear variaveis
nmap <silent> <leader>cr <Plug>(coc-rename)
" Use `[c` and `]c` for navigate diagnostics
nmap <silent> <leader>cdp <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>cdn <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Gerencias sessões
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>


" Dividir a tela mais rapidamente
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

" Toda a vez que pular para próxima palavra buscada o cursor fica no centro da tela
nnoremap n nzzzv
nnoremap N Nzzzv

" Abrir NERDTree com F3
nnoremap <F3> :NERDTreeToggle<CR>

" Ir para o normal mode mais rapidamente
imap jk <Esc>
imap kj <Esc>

" Selecionar todo o arquivo
nnoremap <leader>sa ggVG

" Abrir arquivo na lista de buffers
nnoremap <silent> <leader>bb :Buffers<CR>

" Fechar buffer atual
noremap <leader>bd :bd<CR>

" Salvar mais rapidamente
nnoremap <leader>bs :w<CR>

" Procurar arquivo na pasta atual
nnoremap <silent> <leader>pf :FZF -m<CR>

" Procurar nos arquivos
nnoremap <leader>ps :Find 

" Abrir/fechar tagbar
nmap <silent> <F4> :TagbarToggle<CR>

" Mover bloco de código selecionado
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Manter seleção após indentar código no modo visual
vmap < <gv
vmap > >gv

" Mover cursor para outra janela divida
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Limpar seleção da pesquisa
nnoremap <silent> <leader><leader> :noh<cr>

" Alterar de arquivo mais rapidamente
nnoremap <silent> <leader><Tab> 

" Rodar script de banco
nnoremap <F6> :w<CR>:AsyncRun PGPASSWORD=postgres psql -U postgres -d integratto2 -h localhost -f '%'<CR>

" Rodar comando de banco
nnoremap <F7> "sY:w<CR>:AsyncRun PGPASSWORD=postgres psql -U postgres -d integratto2 -h localhost -c 's'<CR>

" Rodar comando de banco selecionado
vnoremap <F7> "sy:w<CR>:AsyncRun PGPASSWORD=postgres psql -U postgres -d integratto2 -h localhost -c 's'<CR>gv

" Limpar espaços em branco nos finais da linha
nnoremap <F5> mp:%s/\s\+$/<CR>`p

" Buscar o que está visualmente selecionado pressionando //
vnoremap // y/<C-R>"<CR>

" Rodar o M.D.A.
noremap <F9> :AsyncRun docker-compose run --rm php-transform<CR>

" Gerar arquivo tags
" nnoremap <F12> :AsyncRun ctags -R --fields=+laimS --languages=php --exclude="\.git" --exclude="app/cache" --exclude="node_modules"<CR>
nnoremap <F12> :AsyncRun ctags -R --fields=+laimS --exclude="\.git" --exclude="app/cache" --exclude="node_modules" --exclude="web"<CR>

" Enter no modo normal funciona como no modo inserção
nnoremap <CR> i<CR><Esc>

" Identar arquivo
nnoremap <leader>i mpgg=G`p

" Chamar função que alterna o quickfix
nnoremap <Tab> :call QFixToggle()<CR>

" Setas redimensionam janelas adjacentes
nnoremap <left> :vertical resize -5<cr>
nnoremap <right> :vertical resize +5<cr>
nnoremap <up> :resize -5<cr>
nnoremap <down> :resize +5<cr>

" Ponto e vírgula no final da linha
noremap <leader>; mpA;<Esc>`p

" Vírgula no final da linha
noremap <leader>, mpA,<Esc>`p

" Abrir configurações do vim
nnoremap <leader>ov :e ~/.vimrc<CR>

" Abrir configurações pessoais do vim
nnoremap <leader>ovl :e ~/.vimrc.local<CR>

" Abrir configurações de plugins do vim
nnoremap <leader>ovb :e ~/.vimrc.local.bundles<CR>

" Atualizar configurações do nvim
nnoremap <leader>sv :source ~/.config/nvim/init.vim<CR>
