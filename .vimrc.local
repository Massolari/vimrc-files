"*****************************
" Configurações de variáveis *
"*****************************

" Suporte ao mouse
set mouse=a

" Mostra os números da linha de forma relativa e o número atual da linha
set number relativenumber

" Linha de status com mais informações
set statusline=%#CursorColumn#%{StatuslineGit()}%#StatusLine#\ %{ChangeStatuslineColor()}%f%m%r%h%w%=%y\ (line\ %l\/%L,\ col\ %c)\ 

" Mostrar comandos no canto inferior direito
set showcmd

" Tema do vscode
colorscheme codedark

" Ligar o menu de opções com tab
set wildmenu

" Realçar linha onde o cursor está
set cursorline

" De para com o modo e o sua descrição
let g:currentmode={
	\ 'n'  : 'Normal',
	\ 'no' : 'N·Operator Pending',
	\ 'v'  : 'Visual',
	\ 'V'  : 'V·Line',
	\ '' : 'V·Block',
	\ 's'  : 'Select',
	\ 'S'  : 'S·Line',
	\ '' : 'S·Block',
	\ 'i'  : 'Insert',
	\ 'R'  : 'Replace',
	\ 'Rv' : 'V·Replace',
	\ 'c'  : 'Command',
	\ 'cv' : 'Vim Ex',
	\ 'ce' : 'Ex',
	\ 'r'  : 'Prompt',
	\ 'rm' : 'More',
	\ 'r?' : 'Confirm',
	\ '!'  : 'Shell',
	\}

" netrw com o estilo do nerdtree
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20

" Melhora as cores, se tiver suporte
if (has("termguicolors"))
    set termguicolors
endif

" Validar xml com o nsjusecase.xsd
let g:ale_xml_xmllint_options = "--noout --schema vendor/nasajon/mdatransformer/schemas/nsjusecase.xsd %"

" Ao executar o AsyncRun já abrir o quickfix
let g:asyncrun_open = 10

" Usar o emmet apenas no modo visual ou no modo inserção
let g:user_emmet_mode='iv'

" Diretórios à ignorar ao procurar arquivos
let Grep_Skip_Dirs = '.git node_modules cache'

" Comando do fzf
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'app/cache/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

"***********
" Comandos *
"***********

" Fechar todos os outros buffers
command! Bdall %bd|e#|bd#

"***********************
" Comandos automáticos *
"***********************

" Configuração de comentário para twig
autocmd FileType html.twig setlocal commentstring={#\ %s\ #}

" Insere o 'use' de classes em arquivos php
" autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

" Sempre que entrar na janela de quickfix retirar o mapeamento customizado do Enter
augroup enable-cr-quickfix
    " In the quickfix window, <CR> is used to jump to the error under the cursor, so undefine the mapping there.
    autocmd!
    autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
augroup END

" Abrir todos os foldings quando entrar em um arquivo
augroup openfold
    autocmd!
    autocmd BufEnter,FocusGained * norm zR
augroup END

" Ativa o número da linha relativo apenas quando o buffer estiver em foco e no normal mode
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"**********
" Funções *
"**********

" Função para alterar o quickfix
function! QFixToggle()
    if exists("g:qfix_win")
        cclose
        unlet g:qfix_win
    else
        copen 10
        let g:qfix_win = bufnr("$")
    endif
endfunction

" Função que é usada para import de arquivos;
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

" Função para pegar a branch atual
function! GitBranch()
    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

" Função para retornar a branch, se for vazio retorna um espaço
function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0 ? l:branchname : ''
endfunction

" Função que muda a cor da status bar dependendo do modo
function! ChangeStatuslineColor() "{{{
    if (mode() ==# 'v')
        hi statusline guibg=#099942 ctermfg=6 guifg=Black ctermbg=0
    elseif (mode() ==# 'V' && g:currentmode[mode()] ==# 'V·Line')
        hi statusline guibg=#7c9909 ctermfg=6 guifg=Black ctermbg=0
    elseif (g:currentmode[mode()] ==# 'V·Block')
        hi statusline guibg=#f76200 ctermfg=6 guifg=Black ctermbg=0
    elseif (mode() ==# 'i')
        hi statusline guibg=#047199 ctermfg=6 guifg=#D4D4D4 ctermbg=0
    elseif (mode() ==# 'R')
        hi statusline guibg=#99091e ctermfg=6 guifg=#D4D4D4 ctermbg=0
    else
        hi statusline guibg=#373737 ctermfg=6 guifg=#D4D4D4 ctermbg=0
    endif
	return ''
endfunction

"*************
" Mapeamento *
"*************

" Abrir netrw com F3
nnoremap <F3> :Lexplore<CR>

" Ir para o normal mode mais rapidamente
:imap jk <Esc>
:imap kj <Esc>

" Salvar mais rapidamente
:nnoremap <S-Space> :w<CR>

" Code folding
set foldcolumn=4
set foldmethod=indent

" Limpar espaços em branco nos finais da linha
nnoremap <F5> mp:%s/\s\+$/<CR>`p

" Buscar o que está visualmente selecionado pressionando //
vnoremap // y/<C-R>"<CR>

" Rodar o M.D.A.
noremap <F9> :AsyncRun docker-compose run --rm php-transform<CR>

" Gerar arquivo tags
nnoremap <F12> :AsyncRun ctags -R --fields=+laimS --languages=php --exclude="\.git" --exclude="app/cache" --exclude="node_modules"<CR>

" Enter no modo normal funciona como no modo inserção
nnoremap <CR> i<CR><Esc>

" Identar arquivo
nnoremap <leader>i mpgg=G`p

" Chamar função que alterna o quickfix
nnoremap <Tab> :call QFixToggle()<CR>

" Setas redimensionam janelas adjacentes
nnoremap <left> :vertical resize -5<cr>
nnoremap <right> :vertical resize +5<cr>
nnoremap <up> :resize -5<cr>
nnoremap <down> :resize +5<cr>

" Ponto e vírgula no final da linha
nmap <C-Space> mpA;<Esc>`p;
nmap <C-@> <C-Space>
